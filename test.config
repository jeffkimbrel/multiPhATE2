# File multiPhate.config controls execution of the multiPhATE driver of the PhATE pipeline.
# The rules of the game:
#    List your genomes as shown below: (e.g., Genome NNN), followed by the 5 required parameters.
#    Include the slash after the name of your output subdirectory (e.g., MyPhageOutDir/)
#    It is best to use numbering (e.g., Genome 1, etc).
#    When naming your genomes, do not use special characters or spaces.
#    Name your genome's fasta file with file extension ".fasta".
#    You may name the multiPhate.config file as you like, "multiPhate.config" is suggested.
# Invoke multiPhate as follows:  $ python multiPhate.py multiPhate.config

# List your genomes here. Below are examples; insert your own data. To include more than 2 genomes,
# Replicate the 6 lines "Genome X" through "output_subdir" as many times as needed.
# The following parameter values must be unique: genome_file, genome_name, output_subdir.
# Genome fasta files must be saved to the PipelineInput/ directory.
# Your genome name must be alphanumeric (including '_') with no spaces! This string will be used to name files
Genome List: 
Genome 1 
genome_file='Eb_P2.fasta'
genome_type='phage'
genome_species='Eb_P2_phage'
genome_name='Eb_P2'
output_subdir='Eb_P2/'
#Genome 2
#genome_file='Eb_WPhi.fasta'
#genome_type='phage'
#genome_species='Eb_WPhi_phage'
#genome_name='Eb_WPhi'
#output_subdir='Eb_WPhi/'
#Genome 3
#genome_file='Ec_pro483.fasta'
#genome_type='phage'
#genome_species='Ec_pro483_phage' 
#genome_name='Ec_pro483'
#output_subdir='Ec_pro483/'
END of list

# Processing information: for gene-calling (followed by translation) only, set translate only line to true
# It is recommended that you first do gene calling, without functional annotation (blast, hmm) in order to
# examine the results of gene finding and possibly compare results between multiple gene callers. Then,
# you may select the most satisfactory gene caller, and proceed with functional annotation using those calls. 
# To perform gene calling followed by functional annotation, set translate_only='false'.
genetic_code='11'
translate_only='true'

# GENE CALLERS 
# Choices for gene calling are: phanotate, genemarks, prodigal, glimmer, and custom.
# Turn individual <caller>_calls on or off (specify: 'true' or 'false').
# Set genemarks_calls to 'false' if you don't have a license for that software.
# Custom genecall output must be in GFF3 format, with file extension '.gff3'.
# Any custom genecall output file(s) to be used must be saved to the PipelineInput/ directory.
# Each custom genecall output file will be recognized as follows: genomeDir.custom.gff, where name is
#    the name you gave your genome (above, under Genome List). Example: Eb_P2.custom.gff 
#    You may accept the default custom_gene_caller_name as 'custom', or you may rename
#    it (e.g., rast), which will be reflected in the system output.
#    Caution: Name your custom genecall output file(s) correctly, else they will not be recognized.
#    Exactly one custom genecall output file per genome is allowed, but not every genome
#    need have a custom genecall file; if phate cannot find the custom genecall output file,
#    then custom calls will be ignored.
# The primary_calls parameter specifies which gene caller's output will be used for functional annotation.
#    Choices are: 'phanotate','genemarks','prodigal','glimmer','custom','consensus','superset','commoncore'.
#    If you choose 'consensus', a consensus genecall set will be computed from the gene callers 
#    that were run. If you choose 'superset', a non-redundant superset of the callers' outputs
#    will be computed. If you choose 'commoncore', only the universally common gene calls will be used.
# Set the callers you want:
phanotate_calls='false'
genemarks_calls='false'
prodigal_calls='false'
glimmer_calls='false'
custom_gene_calls='false'
# Set which caller is primary:
primary_calls='phanotate'  

# ANNOTATION

# SEQUENCE DATABASE SEARHES 

# Blast parameters
blastn_identity='90'
blastp_identity='90'
blastn_hit_count='5'
blastp_hit_count='5'

# Genomes: ncbi_virus_blast
# Blastn will be run against the virus genome database
ncbi_virus_genome_blast='false'

# Genes: refseq_gene_blast 
# Blastn will be run against the gene database
vog_gene_blast='false'

# Proteins: ncbi_virus_protein_blast, kegg_virus_blast, nr_blast, refseq_protein_blast, phantome_blast, pvogs_blast
# Select blastp and/or jackhmmer to be run against any/all of the fasta blast databases. 
# Note: Set kegg_virus_blast to 'false' unless you have a license for that database (see README).
# Note: Some of these databases are huge: use with caution, as processing will take much time.
# Note also that hmm search codes (ie, phmmer, jackhmmer) do not respect segmented databases.
# Hense, phmmer and jackhmmer will not work with Swissprot or Refseq Protein.
blastp='false'
phmmer='false'
jackhmmer='false'
pvogs_blast='false'
vog_protein_blast='false'
phantome_blast='false'
kegg_virus_blast='false'         
swissprot_blast='false'          
refseq_protein_blast='false'
ncbi_virus_protein_blast='false' 
nr_blast='false' 
cazy_blast='false' 

# Fasta blast database Locations 
# Specify locations of your local instances of fasta blast-formatted databases; use full path/filename
ncbi_virus_genome_database_path=''
ncbi_virus_protein_database_path=''
refseq_protein_database_path=''
kegg_virus_database_path='/.../T40000.pep'
phantome_database_path=''
pvogs_database_path=''
vog_gene_database_path=''
vog_protein_database_path=''
swissprot_database_path=''
nr_database_path=''
cazy_database_path=''
cazy_annotation_path=''

# Custom blast processing
# Here, you are providing your own fasta databases
custom_genome_blast='false'
custom_genome_blast_database_path=''
custom_gene_blast='false'
custom_gene_blast_database_path=''
custom_protein_blast='false'
custom_protein_blast_database_path=''

# HMM PROFILE DATABASE SEARCHES 

# HMM programs for hmm search against profile databases 
hmmscan='false'

# HMM profiles databases to use
pvogs_hmm_profiles='false'
vogs_hmm_profiles='false'

# HMM profiles database locations 
# Specify locations of your local instances of databases; use full path/filename
pvogs_hmm_profiles_database_path=''
vogs_hmm_profiles_database_path=''

# Custom processing
#custom_hmm_profiles='false'
#custom_hmm_profiles_database_path=''

##### COMPARATIVE GENOMICS #####

# Comparing Gene Profiles across Genomes
# Run this analysis only if you are comparing at least 2 similar genomes.
# The "reference" genome will be the first genome that you listed (above).
# First, enable CompareGeneProfiles (CGP):
CGP='false'
# Next, run hmmbuild to create profiles for each cluster assembled using CGP: 
#hmmbuild='false'
# Finally, run profile HMMs against protein database(s) already selected (above):
#hmmsearch='false'

# PARALLELISM
HPC='false'
threads='1'
blast_threads='1'

# VERBOSITY
# Control which messages to print or whether to retain intermediate data
# Warnings and messages can be voluminous.
phate_warnings='false'
phate_messages='false'
phate_progress='true'
clean_raw_data='true'
